{"version":3,"sources":["styled/index.js","components/QuizData.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["PageWrapper","styled","div","PageInner","Content","QuizContentStyle","QuizWrapper","QuizData","id","question","options","answer","Quiz","props","loadQuiz","currentIndex","state","setState","nextQuestionHandler","userAnswer","score","checkAnswer","disabled","finishHandler","length","quizEnd","this","prevProps","prevState","map","item","index","className","key","option","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f1865fa.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const PageWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  margin: 0 auto;\n`\n\nexport const PageInner = styled.div`\n  position: absolute;\n  padding: 3rem;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  ul {\n      list-style: none;\n  }\n`\n\nexport const QuizContentStyle = styled(Content)`\n  padding: 3rem 0;\n`\n\nexport const QuizWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`","export const QuizData = [\n    {\n        id: 0,\n        question: `You should increase the distance between your vehicle and the vehicle ahead when you:`,\n        options: [`Are following a small passenger vehicle.`, `Are being tailgated by another driver.`, `Are driving more slowly than the posted speed limit.`],\n        answer: `Are being tailgated by another driver.`\n    },\n    {\n        id: 1,\n        question: `In which of the following scenarios should your wheels not be pointed straight ahead?`,\n        options: [`When waiting to make a left turn at a traffic light.`, `When parked on a hill or sloping driveway.`, `When parked on the side of a level roadway where there is no curb.`],\n        answer: `When parked on a hill or sloping driveway.`\n    },\n    {\n        id: 2,\n        question: `If a truck or bus is making a right turn where you also need to make a right turn, you should:`,\n        options: [`Quickly turn before the truck or bus is able to.`, `Wait until the truck or bus turns before you turn.`, `Squeeze between the truck or bus and the curb.`],\n        answer: `Wait until the truck or bus turns before you turn.`\n    },\n    {\n        id: 3,\n        question: `\n        When being followed by a tailgater, which of the following will help you avoid being hit from behind?`,\n        options: [`Merging into another lane`, `Decreasing your following distance`, `Changing lanes frequently`],\n        answer: `Decreasing your following distance`\n    },\n    {\n        id: 4,\n        question: `When you see this sign, you:`,\n        options: [`Are approaching a railroad crossing and should prepare to stop.`, `Will always stop at the upcoming railroad crossing.`, `Should stop and wait for a signal before crossing the railroad tracks.`],\n        answer: `Are approaching a railroad crossing and should prepare to stop.`\n    },\n    {\n        id: 5,\n        question: `When driving under snowy or icy conditions:`,\n        options: [`It is safe to use your cruise control.`, `Make speed and directional changes more gradually than you would otherwise.`, `Drive as you would under normal conditions.`],\n        answer: `Make speed and directional changes more gradually than you would otherwise.`\n    },\n    {\n        id: 6,\n        question: `A broken yellow centerline means that:`,\n        options: [`Passing is not permitted.`, `Passing on the right is permitted when the way ahead is clear.`, `Passing on the left is permitted when the way ahead is clear.`],\n        answer: `Passing on the left is permitted when the way ahead is clear.`\n    },\n    {\n        id: 7,\n        question: `When driving in fog, rain, or snow, use:`,\n        options: [`Low beams.`, `High beams.`, `Fog lights only.`],\n        answer: `Low beams.`\n    },\n    {\n        id: 8,\n        question: `\n        Which of these statements is true about changing lanes?`,\n        options: [`You only need to turn and look over your right shoulder for lane changes to the right or left.`, `Look over your right shoulder for a right lane change and your left shoulder for a left lane change.`, `Vehicles with two outside mirrors do not have blind spots.`],\n        answer: `Look over your right shoulder for a right lane change and your left shoulder for a left lane change.`\n    },\n    {\n        id: 9,\n        question: `It is illegal for a person 21 years of age or older to drive with a blood alcohol concentration (BAC) that is ___ or higher...`,\n        options: [`.08%`, `.10%`, `.05%`],\n        answer: `.08%`\n    },\n    {\n        id: 10,\n        question: `You must notify the DMV within 5 days if..`,\n        options: [`Sell or transfer your vehicle`, `Are cited for traffic violation`, `Paint your vehicle a different color`],\n        answer: `Sell or transfer your vehicle`\n    },\n    {\n        id: 11,\n        question: `At dawn or dusk, or in rain or snow, it can be hard to see and be seen. A good way to let other drivers know you are there is to turn...`,\n        options: [`Up the instrument panel lights`, `On your parking lights`, `On your headlights`],\n        answer: `On your headlights`\n    },\n    {\n        id: 12,\n        question: `When changing lanes on a freeway, you should..`,\n        options: [`Signal for at least 5 seconds`, `Slow down before you start to change lanes`, `Assume there is enough space for your vehicle, if you signal first`],\n        answer: `Assume there is enough space for your vehicle, if you signal first`\n    },\n    {\n        id: 13,\n        question: `You are driving in a city street and see an emergency vehicle with flashing lights behind you. What do you do?`,\n        options: [`Drive to the right edge of the road and slow down`, `Drive to the right edge of the road and stop`, `Stay in you lane, slow down, and let it pass`],\n        answer: `Drive to the right edge of the road and stop`\n    },\n    {\n        id: 14,\n        question: `Large trucks turning right onto a street with two lanes in each direction...`,\n        options: [`May complete their turn in either the left or right lane`, `Often have to use part of the left lane to complete the turn`, `Must stay in the right lane at all times`],\n        answer: `Often have to use part of the left lane to complete the turn`\n    },\n    {\n        id: 15,\n        question: `You are driving on a one-way street. You may turn left onto another one-way street:`,\n        options: [`Only if a sign permits the turn`, `If traffic on the street is moving to the left`, `If traffic on the street is moving to the right`],\n        answer: `If traffic on the street is moving to the left`\n    },\n    {\n        id: 16,\n        question: `You want to pass a bicyclist riding on the edge of your lane, You:`,\n        options: [`Must Honk your horn before passing the bicyclist`, `Must not squeeze past the bicyclist`, `Must not pass the bicyclist for any reason`],\n        answer: `Must not squeeze past the bicyclist`\n    },\n    {\n        id: 17,\n        question: `You should not start across an intersection if you know you will block the intersection when the light turns red:`,\n        options: [`Under any circumstances`, `Unless you entered the intersection on a yellow light`, `Unless you entered the intersection on a green light`],\n        answer: `Under any circumstances`\n    },\n    {\n        id: 18,\n        question: ``,\n        options: [``],\n        answer: ``\n    },\n    {\n        id: 19,\n        question: ``,\n        options: [``],\n        answer: ``\n    },\n    {\n        id: 20,\n        question: ``,\n        options: [``],\n        answer: ``\n    },\n]","import React, { Component } from 'react'\nimport { QuizData } from './QuizData'\nimport { QuizContentStyle, QuizWrapper } from '../styled'\nexport default class Quiz extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            userAnswer: null,\n            currentIndex: 0,\n            options: [],\n            quizEnd: false, // true if it is the last question\n            score: 0,\n            disabled: true\n        }\n    }\n\n    loadQuiz = () => {\n        const { currentIndex } = this.state;\n        this.setState(() => {\n            return {\n                question: QuizData[currentIndex].question,\n                options: QuizData[currentIndex].options,\n                answer: QuizData[currentIndex].answer\n            }\n        })\n    }\n\n    nextQuestionHandler = () => {\n        const { userAnswer, answer, score } = this.state\n        if (userAnswer === answer) {\n            this.setState({\n                score: score + 1\n            })\n        }\n        this.setState({\n            currentIndex: this.state.currentIndex + 1\n        })\n    }\n\n    componentDidMount() {\n        this.loadQuiz();\n    }\n\n    checkAnswer = answer => {\n        this.setState({\n            userAnswer: answer,\n            disabled: false\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { currentIndex } = this.state;\n        if (this.state.currentIndex !== prevState.currentIndex) {\n            this.setState(() => {\n                return {\n                    disabled: true,\n                    question: QuizData[currentIndex].question,\n                    options: QuizData[currentIndex].options,\n                    answer: QuizData[currentIndex].answer\n                }\n            })\n        }\n    }\n\n    finishHandler = () => {\n        if (this.state.currentIndex === QuizData.length - 1) {\n            this.setState({\n                quizEnd: true\n            })\n        }\n    }\n\n    render() {\n        const { question, options, currentIndex, userAnswer, quizEnd } = this.state\n\n        if (quizEnd) {\n            return (\n                <div>\n                    <h1>The final score is {this.state.score} points</h1>\n                    <p>The correct answers</p>\n                    <ul>\n                        {QuizData.map((item, index) => (\n                            <li className=\"options\"\n                                key={index}\n                            >{item.answer}</li>\n                        ))}\n                    </ul>\n                </div>\n            )\n        }\n\n        return (\n            <QuizContentStyle>\n                <QuizWrapper>\n                    <h2>{question}</h2>\n\n                    {\n                        options.map(option =>\n                            <p\n                                key={option.id}\n                                className={`options ${userAnswer === option ? 'selected' : null}`}\n                                onClick={() => this.checkAnswer(option)}\n                            >\n                                {option}\n                            </p>\n                        )\n                    }\n                    <span>{`Question ${currentIndex + 1} of ${QuizData.length}`}</span>\n                    {currentIndex < QuizData - 1 &&\n                        <button\n                            disabled={this.state.disabled}\n                            onClick={this.nextQuestionHandler}\n                        >\n                            Next Question\n                        </button>}\n                    {\n                        currentIndex === QuizData.length - 1 &&\n                        <button\n                            onClick={this.state.finishHandler}\n                            disabled={this.state.disabled}\n                        >\n                            Finish\n                        </button>\n                    }\n                </QuizWrapper>\n            </QuizContentStyle>\n        )\n    }\n}\n","import React from 'react'\nimport { PageWrapper, PageInner, Content } from './styled'\nimport './App.scss'\nimport Quiz from './components/Quiz'\n\nfunction App() {\n  return (\n    <PageWrapper>\n      <PageInner>\n        <h1>DMV Permit Practice Test</h1>\n        <Content>\n          <Quiz />\n        </Content>\n      </PageInner>\n    </PageWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}